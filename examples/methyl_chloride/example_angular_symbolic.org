#+TITLE: Angular momentum and polarization factors in RFWM
#+AUTHOR: G. Kowzan
#+PROPERTY: header-args :session angular-symbolic :async yes :eval never-export

* Imports
#+begin_src jupyter-python
from rotsim2d.angular.symbolic import *
init_printing(forecolor="Black", scale=1.8)
#+end_src

#+RESULTS:

* rfactorize
#+begin_src jupyter-python
rfactorize(gfactors["QRP"], T00_exprs, cfac=False)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3200d4e328c7c190deb7520a470a46a06603963c.png]]

* R-factors
Try to simplify R-factors.
#+begin_src jupyter-python
PQR = sum(gfactors['QQR'][i]*FU['TR8'](T00_exprs[i]) for i in range(3)).subs(dict(zip(T00_trigs, [x1, x2, x3])))
PQR
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/91d715f612cd9bd4927e52dabbb65b781aca2765.png]]

#+begin_src jupyter-python
PQR_dict = {k: powdenest(factor(powdenest(v, force=True), deep=True), force=True)
            for k, v in collect(expand(PQR), [x1, x2, x3], evaluate=False).items()}
PQR_dict
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4fa2ac3cbfa5443ff7e22e22c96beb8f1f49eba6.png]]

#+begin_src jupyter-python
PQR = factor(sum(k*v for k, v in PQR_dict.items()))
collect(PQR, [x1, x2, x3])
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a7c662ef3302effab6e6cdffa32ee820da6cf9e1.png]]

* Expressions
#+begin_src jupyter-python
cos(phi - phj - phk + phl)/60 + cos(phi - phj + phk - phl)/10 + cos(phi + phj - phk - phl)/60
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a256fa5885976d100d2c5fce0984511bc6e9a6b0.png]]

#+begin_src jupyter-python
-cos(phi - phj - phk + phl)/20 + cos(phi - phj + phk - phl)/30 - cos(phi + phj - phk - phl)/20
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/62b9e875d3797545b3d610005b1034322e1cdbdb.png]]

