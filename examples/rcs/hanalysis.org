#+TITLE: Analysis of HAN data
#+STARTUP: overview
#+AUTHOR:
#+PROPERTY: header-args :session han-data :async yes :eval-never-export :comments both :tangle hanalysis_org.py :padline no

* Imports and constants
#+begin_src jupyter-python
from typing import Union, Optional
from pathlib import Path
import xarray as xr
import numpy as np
import scipy.constants as C
import scipy.optimize as opt
import matplotlib.pyplot as plt
import matplotlib as mpl
import rotsim2d.rcs as rcs
plt.ion()
# mpl.rcParams['figure.dpi'] = 144.0 # good value for export
mpl.rcParams['figure.dpi'] = 96.0 # good value for display
mpl.rcParams['figure.figsize'] = (4, 3)
OUTPUT = Path('~/notes/.attach/sb/:8c55d411-1a6f-4227-bf33-653ce4043c67').expanduser()
INPUT = Path('/mnt/d/fizyka/DFCS/POMIARY/CETAS/January2021/Jan272021')
#+end_src

#+RESULTS:
* Functions
#+begin_src jupyter-python
def read_pump_probe(fpath: Union[str, Path], anisotropy: bool=True, magic: bool=False,
                    not_anisotropy: bool=False, offset: Optional[float]=None) -> xr.DataArray:
    fpath = Path(fpath)
    np_data = np.genfromtxt(fpath)
    xr_data = xr.DataArray(np_data[:, 1:],
                           coords=[('time', np_data.T[0]),
                                   ('param', ['par', 'par_err',
                                              'perp', 'perp_err'])],
                           dims=('time', 'param'),)
    if offset:
        xr_data.loc[:, 'par'] += offset
        xr_data.loc[:, 'perp'] += offset
    if anisotropy:
        xr_r = r(xr_data)
        xr_data = xr.concat((xr_data, xr_r), dim='param')
    if magic:
        xr_ma = ma(xr_data)
        xr_data = xr.concat((xr_data, xr_ma), dim='param')
    if not_anisotropy:
        xr_notr = notr(xr_data)
        xr_data = xr.concat((xr_data, xr_notr), dim='param')
    return xr_data


def r(xr_decay: xr.DataArray) -> xr.DataArray:
    xr_data = (xr_decay.loc[:, 'par']-xr_decay.loc[:, 'perp'])/(xr_decay.loc[:, 'par']+2*xr_decay.loc[:, 'perp'])
    return xr_data.expand_dims({'param': ['r']}, 0)


def notr(xr_decay: xr.DataArray) -> xr.DataArray:
    xr_data = -(xr_decay.loc[:, 'par']-xr_decay.loc[:, 'perp'])
    return xr_data.expand_dims({'param': ['notr']}, 0)


def ma(xr_decay: xr.DataArray) -> xr.DataArray:
    xr_data = (xr_decay.loc[:, 'par']+2*xr_decay.loc[:, 'perp'])/3
    return xr_data.expand_dims({'param': ['ma']}, 0)
#+end_src

#+RESULTS:
* Load data
#+begin_src jupyter-python
HAN_Ar = {3.3: read_pump_probe(INPUT / 'HAN_Ar_3_3PSI.txt', magic=True, not_anisotropy=True, offset=-1.5),
          14.2: read_pump_probe(INPUT / 'HAN_Ar_14_2PSI.txt', magic=True, not_anisotropy=True, offset=-1.5),
          27.6: read_pump_probe(INPUT / 'HAN_Ar_27_6PSI.txt', magic=True, not_anisotropy=True, offset=-1.5)}
HAN_He = {3.6: read_pump_probe(INPUT / 'HAN_He_3_6PSI.txt', magic=True, not_anisotropy=True, offset=-1.5)}

SA_Ar = {3.5: read_pump_probe(INPUT / 'SA_Ar_3_5PSI.txt', magic=True, not_anisotropy=True),
         12.3: read_pump_probe(INPUT / 'SA_Ar_12_3PSI.txt', magic=True, not_anisotropy=True),
         27.3: read_pump_probe(INPUT / 'SA_Ar_27_3PSI.txt', magic=True, not_anisotropy=True),
         31.3: read_pump_probe(INPUT / 'SA_Ar_31_3PSI.txt', magic=True, not_anisotropy=True)}
SA_He = {3.6: read_pump_probe(INPUT / 'SA_He_3_6PSI.txt', magic=True, not_anisotropy=True),
         12.9: read_pump_probe(INPUT / 'SA_He_12_9PSI.txt', magic=True, not_anisotropy=True)}
#+end_src

#+RESULTS:
* SA measurements
Plot anisotropy and fake magic angle data for SA.
#+name: sa-anisotropy
#+begin_src jupyter-python
fig, ax = plt.subplots()
for k, v in SA_Ar.items():
    ax.plot(v.loc[0.0:].coords['time'], v.loc[0.0:, 'r'],
            label='Ar, {:.1f} psi'.format(k))
# for k, v in SA_He.items():
#     ax.plot(v.loc[0.0:].coords['time'], v.loc[0.0:, 'r'],
#             label='He, {:.1f} psi'.format(k))
ax.set(ylim=(-0.5, 1.2), xlim=(-1, 100), xlabel='Time (ps)', ylabel='Anisotropy')
ax.legend(loc='best')
None
#+end_src

#+RESULTS: sa-anisotropy
[[file:./.ob-jupyter/2a05912946d4d050a1eee3cdeee6fee162eda9a7.png]]

#+name: sa-magic-angle
#+begin_src jupyter-python
fig, ax = plt.subplots()
for k, v in SA_Ar.items():
    ax.plot(v.loc[0.0:].coords['time'], v.loc[0.0:, 'ma'],
            label='Ar, {:.1f} psi'.format(k))
# for k, v in SA_He.items():
#     ax.plot(v.loc[0.0:].coords['time'], v.loc[0.0:, 'ma'],
#             label='He, {:.1f} psi'.format(k))
ax.set(xlabel='Time (ps)', ylabel='Magic angle', ylim=(0.0, 1.5))
ax.legend(loc='best')
None
#+end_src

#+RESULTS: sa-magic-angle
[[file:./.ob-jupyter/0502b9148fa3a54aadcc440125ef90df0749e1dd.png]]

Taking optimized planar SA geometry from cite:Pijeau2018 and calculating rotational constants with Psi4, we get $A=0.106$, $B=0.040$ and $C=0.029$ cm^{-1}.  Using these constants, we need to go as low as T=5 K to obtain agreement with experimental anisotropy.
#+begin_src jupyter-python
A = 0.10621666
B = (0.04030298+0.02921689)/2
T = 5.0

ts = SA_Ar[3.5].loc[0.0:].coords['time'].data*1e-12
fig, ax = plt.subplots()
ax.plot(ts*1e12, rcs.decay_total_anisotropy(rcs.est_jmax(A, T), A, B, T, ts), label='theory @ 5 K')
ax.plot(ts*1e12, SA_Ar[3.5].loc[0.0:, 'r'].data, label='3.5 psi Ar')
ax.plot(SA_Ar[12.3].loc[0.0:].coords['time'].data, SA_Ar[12.3].loc[0.0:, 'r'].data, label='12.3 psi Ar')
ax.plot(SA_Ar[31.3].loc[0.0:].coords['time'].data, SA_Ar[31.3].loc[0.0:, 'r'].data, label='31.3 psi Ar')
ax.set(ylim=(-0.1, 0.8))
ax.legend(loc='best')
None
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d76d4908d6af268d34a0527c818638b32babd058.png]]

Signals have quite similar shape both for data which is supposed to only show rotational coherence and for data which is supposed to show everything but rotational coherence.  We cannot make any conclusions about rotational coherence based on SA data.
** Temperature fits
Let's try fitting temperature at two lowest pressures. This is for planar geometry.
#+name: sa-temperature-fit
#+begin_src jupyter-python
def rcs_fit_func_T(t, T, Ascale):
    return Ascale*rcs.decay_total_anisotropy(rcs.est_jmax(A, T), A, B, T, t)

fig, ax = plt.subplots()

ts = SA_Ar[3.5].loc[0.15:].coords['time'].data*1e-12
poptar, pcovar = opt.curve_fit(rcs_fit_func_T, ts, SA_Ar[3.5].loc[0.15:, 'r'].data, p0=(1.0, 10))
#print(poptar)
lar, = ax.plot(ts*1e15, SA_Ar[3.5].loc[0.15:, 'r'].data, label='3.5 psi Ar')
ax.plot(ts*1e15, rcs_fit_func_T(ts, *poptar), ls='--', color=lar.get_color())

ts = SA_Ar[12.3].loc[0.15:].coords['time'].data*1e-12
popthe, pcovhe = opt.curve_fit(rcs_fit_func_T, ts, SA_Ar[12.3].loc[0.15:, 'r'].data, p0=(1.0, 10))
#print(popthe)
lhe, = ax.plot(ts*1e15, SA_Ar[12.3].loc[0.15:, 'r'].data, label='12.3 psi Ar')
ax.plot(ts*1e15, rcs_fit_func_T(ts, *popthe), ls='--', color=lhe.get_color())
ax.set(ylim=(-0.1, 0.5), xlabel='Time (ps)', ylabel=r'$r(t)$')
ax.legend(loc='best')
None
#+end_src

#+RESULTS: sa-temperature-fit
[[file:./.ob-jupyter/29c3cebec5b8985571f472949abf3907ce003ac9.png]]

This gives 4.57 K for 3.5 psi and 2.32 K for 12.3 psi.

For twisted geometry the rotational constants much smaller and the molecule's geometry is quite close to a symmetric top, $A=0.0664$, $B=0.00909$ and $C=0.00822$ cm^{-1}.

#+begin_src jupyter-python
A = 0.0664082
B = (0.0090919+0.00821839)/2

fig, ax = plt.subplots()

ts = SA_Ar[3.5].loc[0.15:].coords['time'].data*1e-12
poptar, pcovar = opt.curve_fit(rcs_fit_func_T, ts, SA_Ar[3.5].loc[0.15:, 'r'].data, p0=(1.0, 10))
#print(poptar)
lar, = ax.plot(ts*1e15, SA_Ar[3.5].loc[0.15:, 'r'].data, label='3.5 psi Ar')
ax.plot(ts*1e15, rcs_fit_func_T(ts, *poptar), ls='--', color=lar.get_color())

ts = SA_Ar[12.3].loc[0.15:].coords['time'].data*1e-12
popthe, pcovhe = opt.curve_fit(rcs_fit_func_T, ts, SA_Ar[12.3].loc[0.15:, 'r'].data, p0=(1.0, 10))
#print(popthe)
lhe, = ax.plot(ts*1e15, SA_Ar[12.3].loc[0.15:, 'r'].data, label='12.3 psi Ar')
ax.plot(ts*1e15, rcs_fit_func_T(ts, *popthe), ls='--', color=lhe.get_color())
ax.set(ylim=(-0.1, 0.5), xlabel='Time (ps)', ylabel=r'$r(t)$')
ax.legend(loc='best')
None
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5a467df3cfcf6fb65367f551be61b15ae8218aae.png]]
We get T=17 K for 3.5 psi and T=9.8 K for 12.3 psi.
** High pressure data
Fits of rotational constant for T=17 K.
#+name: sa-high-pressure
#+begin_src jupyter-python
def rcs_fit_func(t, Bscale, Ascale):
    return Ascale*rcs.decay_total_anisotropy(rcs.est_jmax(A, T), A*Bscale, B*Bscale, T, t)

T = 17.0
ts = SA_Ar[12.3].loc[0.0:].coords['time'].data*1e-12
popt14, pcov14 = opt.curve_fit(rcs_fit_func, ts, SA_Ar[12.3].loc[0.0:, 'r'].data,
                               p0=(1/10, 0.6))
ts = SA_Ar[31.3].loc[0.0:].coords['time'].data*1e-12
popt27, pcov27 = opt.curve_fit(rcs_fit_func, ts, SA_Ar[31.3].loc[0.0:, 'r'].data,
                               p0=(1/10, 0.6))
ts = SA_Ar[27.3].loc[0.0:].coords['time'].data*1e-12
popt27big, pcov27big = opt.curve_fit(rcs_fit_func, ts, SA_Ar[27.3].loc[0.0:, 'r'].data,
                                     p0=(1/10, 0.6))

fig, ax = plt.subplots()

lar, = ax.plot(SA_Ar[3.5].loc[0.0:].coords['time'].data,
               SA_Ar[3.5].loc[0.0:, 'r'].data, label='3.5 psi Ar')
ax.plot(SA_Ar[3.5].loc[0.0:].coords['time'].data,
        rcs_fit_func_T(SA_Ar[3.5].loc[0.0:].coords['time'].data*1e-12, *poptar),
        ls='--', color=lar.get_color())

lar, = ax.plot(SA_Ar[12.3].loc[0.0:].coords['time'].data,
               SA_Ar[12.3].loc[0.0:, 'r'].data, label='12.3 psi Ar')
ax.plot(SA_Ar[12.3].loc[0.0:].coords['time'].data,
        rcs_fit_func(SA_Ar[12.3].loc[0.0:].coords['time'].data*1e-12, *popt14),
        ls='--', color=lar.get_color())

lar, = ax.plot(SA_Ar[31.3].loc[0.0:].coords['time'].data,
               SA_Ar[31.3].loc[0.0:, 'r'].data, label='31.3 psi Ar')
ax.plot(SA_Ar[31.3].loc[0.0:].coords['time'].data,
        rcs_fit_func(SA_Ar[31.3].loc[0.0:].coords['time'].data*1e-12, *popt27),
        ls='--', color=lar.get_color())

lar, = ax.plot(SA_Ar[27.3].loc[0.0:].coords['time'].data,
               SA_Ar[27.3].loc[0.0:, 'r'].data, label='27.3 psi Ar')
ax.plot(SA_Ar[27.3].loc[0.0:].coords['time'].data,
        rcs_fit_func(SA_Ar[27.3].loc[0.0:].coords['time'].data*1e-12, *popt27big),
        ls='--', color=lar.get_color())

ax.set(ylim=(-0.1, 1.1), xlim=(-1, 400), xlabel='Time (ps)', ylabel=r'$r(t)$')
ax.legend(loc='best')
None
#+end_src

#+RESULTS: sa-high-pressure
[[file:./.ob-jupyter/7d2faf21a74fb0dfb72bd04214867e86caf44752.png]]
We get for 12.3 psi $B= 0.666 B_0=0.00576$ cm^{-1}, for 27.3 psi (long) $B= 0.141 B_0=0.00122$ cm^{-1}, for 31.3 psi $B=0.178 B_0=0.00154$ cm^{-1}.
* On clusters
According to cite:Buck1996 the size of an Ar cluster is:
\begin{equation}
\label{eq:arcluster}
R_n = \left( \frac{3mn}{4\pi\rho} \right)^{1/3} = n^{1/3}R_1,
\end{equation}
where:
- $m$, mass of an atom,
- $\rho$, density of the solid,
- $n$, number of atoms in the cluster.

For Ar cluster $R_1=2.08$ \AA, so density in kg/m^3 is:
#+begin_src jupyter-python
mAr = 39.95*1.660539e-27        # kg
R1 = 2.08e-10                   # m
rho = 3/4/np.pi*mAr/R1**3
rho
#+end_src

#+RESULTS:
: 1759.8969940542645

#+begin_src jupyter-python
def sph_inertia(Bcm: float):
    """Sphere's moment of inertia from rotational constant in cm-1."""
    return C.h/(100*C.c*8*np.pi**2*Bcm)

def nAr(I: float):
    """Number of argon atoms from moment of intertia of an argon ball."""
    return (5/2*I/mAr/R1**2)**(3/5)
#+end_src

#+RESULTS:

Moment of inertia of a solid sphere of Ar atoms is $I=\frac{2}{5}MR^2=\frac{2}{5}n^{5/3}m_{\text{Ar}}R_1^2$. Combining this with the standard equation for the rotational constant (in cm^{-1}) $I=\frac{h}{100 c 8 \pi^2 B_{\text{cm}}}$ gives as *24 Ar atoms* from $B=0.00122$ cm^{-1}.

* HAN measurements
HAN measurements were all shifted by $\Delta OD = 1.5\times 10^{-8}$.
** Paralllel
Plot parallel polarization,
#+begin_src jupyter-python
fig, ax = plt.subplots()
for k, v in HAN_Ar.items():
    ax.plot(v.coords['time'], v.loc[:, 'par'],
            label='Ar, {:.1f} psi'.format(k))
for k, v in HAN_He.items():
    ax.plot(v.coords['time'], v.loc[:, 'par'],
            label='He, {:.1f} psi'.format(k))
ax.set(xlabel='Time (ps)', ylabel='Parallel', ylim=(-14, 0))
ax.axhline(y=-1.5, label='added offset', color='black')
ax.legend(loc='best')
None
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/847d3cc340c71c06573ba66fa67adcbc3277353a.png]]
** Anisotropy
Plot anisotropy,
\begin{equation}
\label{eq:1}
r(t) \equiv \frac{I_{\parallel}(t) - I_{\perp}(t) }{ I_{\parallel}(t) +2I_{\perp}(t) }
\end{equation}
of HAN in He and Ar.  The denominator is proportional to magic-angle data.

#+name: han-anisotropy
#+begin_src jupyter-python
fig, ax = plt.subplots()
for k, v in HAN_Ar.items():
    ax.plot(v.loc[0.0:].coords['time'], v.loc[0.0:, 'r'],
            label='Ar, {:.1f} psi'.format(k))
for k, v in HAN_He.items():
    ax.plot(v.loc[0.0:].coords['time'], v.loc[0.0:, 'r'],
            label='He, {:.1f} psi'.format(k))
ax.set(ylim=(-0.1, 1.2), xlabel='Time (ps)', ylabel='Anisotropy')
ax.legend(loc='best')
None
#+end_src

#+RESULTS: han-anisotropy
[[file:./.ob-jupyter/1d4ce37eb1505ce599a4a811f85b9d1325c57201.png]]

** Magic angle
Magic angle data is $(I_{\parallel}(t) +2I_{\perp}(t))/3$.
#+name: han-magic-angle
#+begin_src jupyter-python
fig, ax = plt.subplots()
for k, v in HAN_Ar.items():
    ax.plot(v.loc[0.0:].coords['time'], v.loc[0.0:, 'ma'],
            label='Ar, {:.1f} psi'.format(k))
for k, v in HAN_He.items():
    ax.plot(v.loc[0.0:].coords['time'], v.loc[0.0:, 'ma'],
            label='He, {:.1f} psi'.format(k))
ax.set(xlabel='Time (ps)', ylabel='Magic angle', ylim=(-10, 0.0))
ax.legend(loc='best')
None
#+end_src

#+RESULTS: han-magic-angle
[[file:./.ob-jupyter/fdacb7c8b49da081df0dae62e0940fcaeacddb12.png]]
So the signal we see does come from rotational coherence.
* HAN rotational coherence
HAN rotational constants are: $A=0.05570$, $B=0.01603$ and $C=0.01248$ cm^{-1}.  This is an asymmetric rotor.  Modeling rotational coherence of an asymmetric top requires obtaining the rotor's wavefunctions in the basis of symmetric top wavefunctions.  As a simpler alternative, one can pretend that the asymmetric rotor is a symmetric rotor and take $B'=(B+C)/2$.  This is what I do.

Let's assume $T=100\text{ K}$ and let's assume that the lowest pressure data has no clusters. We are also assuming that the transition dipole is along the molecular axis and not perpendicular to it.
#+name: han-lowp-comparison
#+begin_src jupyter-python
A = 0.05570
B = (0.01603+0.01248)/2
T = 100.0

ts = HAN_Ar[3.3].loc[0.0:].coords['time'].data*1e-12
fig, ax = plt.subplots()
ax.plot(ts*1e12, rcs.decay_total_anisotropy(rcs.est_jmax(A, T), A, B, T, ts), label='simulation')
ax.plot(ts*1e12, 1.5*rcs.decay_total_anisotropy(rcs.est_jmax(A, T), A, B, T, ts), label='simulation (scaled)')
ax.plot(ts*1e12, HAN_Ar[3.3].loc[0.0:, 'r'].data, label='experiment (3.3 psi Ar)')
ax.plot(ts*1e12, HAN_He[3.6].loc[0.0:, 'r'].data, label='experiment (3.6 psi He)')
ax.set(ylim=(-0.1, 1.2), xlabel='Time (ps)', ylabel=r'$r(t)$')
ax.legend(loc='best')
None
#+end_src

#+RESULTS: han-lowp-comparison
[[file:./.ob-jupyter/7749722cb2ccb633151364143dbd8c7163e284a3.png]]
It is difficult to see why the anisotropy would be larger in reality than from theory.  From RCS theory,  $r(0)$ is $0.4$ for parallel absorption and emission dipoles and it is $-0.2$ for perpendicular configuration. This is also true for asymmetric tops cite:Felker1987.

Regarding the difference in decay time, the coherence decay time for symmetric tops with parallel transition dipole is the longest. For perpendicular dipole it is shorter and for asymmetric tops it may be shorter still, because the states of asymmetric top are less mutually coherent and they do not rephase as well as symmetric ones.

The width of the transient scales as cite:Felker1987,
\begin{equation}
\label{eq:2}
\Delta t \sim \frac{1}{\sqrt{BT}}
\end{equation}
so we can try to retrieve temperature from this data.
** Temperature fits
#+begin_src jupyter-python
def rcs_fit_func(t, Bscale, Ascale):
    return Ascale*rcs.decay_total_anisotropy(rcs.est_jmax(A, T), A, B*Bscale, T, t)

def rcs_fit_func_T(t, T, Ascale):
    return Ascale*rcs.decay_total_anisotropy(rcs.est_jmax(A, T), A, B, T, t)

fig, ax = plt.subplots()

ts = HAN_Ar[3.3].loc[0.15:].coords['time'].data*1e-12
poptar, pcovar = opt.curve_fit(rcs_fit_func_T, ts, HAN_Ar[3.3].loc[0.15:, 'r'].data, p0=(1.3, 50))
#print(poptar)
lar, = ax.plot(ts*1e15, HAN_Ar[3.3].loc[0.15:, 'r'].data, label='3.3 psi Ar')
ax.plot(ts*1e15, rcs_fit_func_T(ts, *poptar), ls='--', color=lar.get_color())

ts = HAN_He[3.6].loc[0.15:].coords['time'].data*1e-12
popthe, pcovhe = opt.curve_fit(rcs_fit_func_T, ts, HAN_He[3.6].loc[0.15:, 'r'].data, p0=(1.3, 50))
#print(popthe)
lhe, = ax.plot(ts*1e15, HAN_He[3.6].loc[0.15:, 'r'].data, label='3.6 psi He')
ax.plot(ts*1e15, rcs_fit_func_T(ts, *popthe), ls='--', color=lhe.get_color())
ax.set(ylim=(-0.1, 0.8), xlabel='Time (ps)', ylabel=r'$r(t)$')
ax.legend(loc='best')
None
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/81f7ecb5ac3301281ccec86f00f1240083430091.png]]
From these fits we get $T=26$ K for Ar and $T=42$ K for He.
** High pressure data
Let's fit the rotational constant assuming that $T=26$ K.
#+begin_src jupyter-python
T=26.0
ts = HAN_Ar[14.2].loc[0.0:].coords['time'].data*1e-12
popt14, pcov14 = opt.curve_fit(rcs_fit_func, ts, HAN_Ar[14.2].loc[0.0:, 'r'].data,
                               p0=(1/10, 1.5))
ts = HAN_Ar[27.6].loc[0.0:].coords['time'].data*1e-12
popt27, pcov27 = opt.curve_fit(rcs_fit_func, ts, HAN_Ar[27.6].loc[0.0:, 'r'].data,
                               p0=(1/10, 1.5))

fig, ax = plt.subplots()

lar, = ax.plot(HAN_Ar[3.3].loc[0.0:].coords['time'].data,
               HAN_Ar[3.3].loc[0.0:, 'r'].data, label='3.3 psi Ar')
ax.plot(HAN_Ar[3.3].loc[0.0:].coords['time'].data,
        rcs_fit_func_T(HAN_Ar[3.3].loc[0.0:].coords['time'].data*1e-12, *poptar),
        ls='--', color=lar.get_color())

lar, = ax.plot(HAN_Ar[14.2].loc[0.0:].coords['time'].data,
               HAN_Ar[14.2].loc[0.0:, 'r'].data, label='14.2 psi Ar')
ax.plot(HAN_Ar[14.2].loc[0.0:].coords['time'].data,
        rcs_fit_func(HAN_Ar[14.2].loc[0.0:].coords['time'].data*1e-12, *popt14),
        ls='--', color=lar.get_color())

lar, = ax.plot(HAN_Ar[27.6].loc[0.0:].coords['time'].data,
               HAN_Ar[27.6].loc[0.0:, 'r'].data, label='27.6 psi Ar')
ax.plot(HAN_Ar[27.6].loc[0.0:].coords['time'].data,
        rcs_fit_func(HAN_Ar[27.6].loc[0.0:].coords['time'].data*1e-12, *popt27),
        ls='--', color=lar.get_color())

ax.set(ylim=(-0.1, 1.1), xlabel='Time (ps)', ylabel=r'$r(t)$')
ax.legend(loc='best')
None
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d7bf8bd500e67a13c25b11d2c65726dd19c3cdce.png]]
As a result we have at 14.2 psi $B=0.22 B_0= 0.031$ cm^{-1} and at 27.6 psi we have $B=0.11 B_0= 0.017$ cm^{-1}.

* TODO
- fluorescence yield of HAN,
- 20% fluorescence surviving each pulse,
- long fluorescence decay of HAN,

bibliographystyle:unsrt
bibliography:shorttitles.bib,rotsimJCP.bib

* COMMENT File-local variables
# Local Variables:
# ispell-local-dictionary: "en"
# End:
